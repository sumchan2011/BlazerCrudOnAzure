@page "/txnRecord"
@inject IProductManager productManager
@inject ISaleTxnManager saleManager
@inject ICustomerManager customerManager
@inject IOrderManager orderManager
@inject IModalService Modal
@inject IStringLocalizer<TxnRecord> localizer

<div class="row col-md-3 pull-right">
    <input type="text" id="txtSearch" placeholder=@localizer["searchByPhone"] class="form-control" @bind="CustomerID" @bind:event="oninput" />
</div>

@if (IsShow)
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th">@localizer["customerName"]<span class="fa"></span></th>
                <th class="sort-th">@localizer["customerPhone"]<span class="fa"></span></th>
                <th class="sort-th">@localizer["customerCompany"]<span class="fa"></span></th>
                <th class="sort-th">@localizer["customerEmail"]<span class="fa"></span></th>
                <th>@localizer["action"]</th>
            </tr>
        </thead>
        <tbody>
            @if (customerModel == null || customerModel.Count == 0)
            {
                <tr><td colspan="5">@localizer["noCustomer"]</td></tr>
            }
            else
            {
                foreach (var customer in customerModel)
                {
                    <tr>
                        <td>@customer.CustomerName</td>
                        <td>@customer.CustomerPhone</td>
                        <td>@customer.CustomerCompany</td>
                        <td>@customer.CustomerEmail</td>
                        <a class="btn btn-primary" @onclick="() => SelectCustomer(customer)">@localizer["select"]</a>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@if (customer != null)
{
    <h4>@localizer["customerName"]: @customer.CustomerName</h4>
    <h4>@localizer["customerPhone"]: @customer.CustomerPhone</h4>
    <h4>@localizer["customerCompany"]: @customer.CustomerCompany</h4>
    <h4>@localizer["customerEmail"]: @customer.CustomerEmail</h4>
}

<br />
<h3>@localizer["orderDetails"]</h3>
<br />

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th class="sort-th">@localizer["orderID"]<span class="fa"></span></th>
            <th class="sort-th">@localizer["orderType"]<span class="fa"></span></th>
            <th class="sort-th">@localizer["totalAmount"]<span class="fa"></span></th>
            <th class="sort-th">@localizer["depositeAmt"]<span class="fa"></span></th>
            <th>@localizer["action"]</th>
        </tr>
    </thead>
    <tbody>
        @if (orderModel == null || orderModel.Count == 0)
        {
            <tr><td colspan="5">@localizer["noOrder"]</td></tr>
        }
        else
        {
            foreach (var order in orderModel)
            {
                <tr data-toggle="collapse" class="clickable" @onclick="() => ToggleTableTr(order.ID)">
                    <td>@order.ID</td>
                    <td>@order.OrderTxnType</td>
                    <td>$@order.OrderTotalAmt</td>
                    <td>$@order.OrderDepositAmt</td>
                    <td></td>
                </tr>
                @if (saleTxnModel == null || saleTxnModel.Count == 0)
                {
                    if (order.ID == selectedindex)
                    {
                        <tr data-toggle="collapse" class="@NavMenuCssClass">
                            <td colspan="6">@localizer["noItem"]</td>
                        </tr>
                    }
                }
                else
                {
                    if (order.ID == saleTxnModel[0].SaleTxnOrderID)
                    {
                        <tr data-toggle="collapse" class="@NavMenuCssClass">
                            <th class="sort-th">@localizer["productName"]<span class="fa "></span></th>
                            <th class="sort-th">@localizer["productOrigin"]<span class="fa"></span></th>
                            <th class="sort-th">@localizer["qty"]<span class="fa"></span></th>
                            <th class="sort-th">@localizer["productPrice"]<span class="fa "></span></th>
                            <th class="sort-th">@localizer["subTotal"]<span class="fa "></span></th>
                            <th class="sort-th">@localizer["status"]<span class="fa"></span></th>
                        </tr>

                        foreach (var item in saleTxnModel)
                        {
                            <tr data-toggle="collapse" class="@NavMenuCssClass">
                                <td>@item.SaleProduct.ProductName</td>
                                <td>@item.SaleProduct.ProductOrigin</td>
                                <td>@item.SaleTxnQty</td>
                                <td>$@item.SaleProduct.ProductPrice</td>
                                <td>$@item.CalculateSubTotal()</td>
                                <td>@item.SaleStatus</td>
                            </tr>
                        }
                    }
                }
            }
        }

    </tbody>
</table>


@code {
    List<Product> productModel;
    Product productEntity = new Product();

    List<SaleTxn> saleTxnModel;
    List<Customer> customerModel;
    Customer customer;

    Order orderEntity = new Order();
    List<Order> orderModel;

    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    int selectedindex;

    private string searchTerm;
    private string CustomerID
    {
        get { return searchTerm; }
        set
        {
            searchTerm = value;
            FilterCustomer(searchTerm).Wait();
        }
    }


    private bool IsShow { get; set; } = false;
    private void Show()
    {
        IsShow = !IsShow;
    }

    private bool IsShow2 { get; set; } = false;
    private void Show2()
    {
        IsShow2 = !IsShow2;
    }


    protected void FilterClear()
    {
        this.IsShow = false;
        this.IsShow2 = false;
    }


    protected async Task FilterCustomer(String customerId)
    {
        IsShow = true;

        customerModel = await customerManager.ListAll(customerId);
    }

    protected async Task SelectCustomer(Customer cust)
    {
        CustomerID = null;
        IsShow = false;
        customer = cust;
        if (orderModel == null)
            orderModel = new List<Order>();

        orderModel = await orderManager.SimplyListAll(customer.ID);
    }

    public async void ToggleTableTr(int orderID)
    {
        selectedindex = orderID;
        collapseNavMenu = !collapseNavMenu;
        saleTxnModel = await saleManager.SimplyListAll(orderID);
        IsShow2 = !IsShow2;
        foreach (SaleTxn item in saleTxnModel)
        {
            item.SaleProduct = await productManager.GetById(item.SaleTxnProductID);
        }


    }
}