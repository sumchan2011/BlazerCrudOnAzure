@page "/deliveryItem"
@inject IProductManager productManager
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">

                <label for="Name" class="control-label">@localizer["productName"]</label>
                <label>@item.SaleProduct.ProductName</label>

                <label for="Name" class="control-label">@localizer["totalOrderQty"]</label>
                <label>@item.SaleTxnQty</label>

                <label for="Name" class="control-label">@localizer["receivedOrderQty"]</label>
                <label>@item.SaleReceivedQty</label>

                <br />
                <label for="number" class="control-label">@localizer["remainQty"]</label>
                <input type="number" step="0.01" max="@item.CalculateCollectQty()" @bind-value="collectQty">


            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary" @onclick="() => ConfirmedUpdate()">@localizer["confirm"]</button>
                <button type="button" class="btn btn-danger" @onclick="() => Cancel()">@localizer["cancel"]</button>
            </div>
        </form>
    </div>
</div>



@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public SaleTxn item { get; set; }
    private double collectQty { get; set; }
    private BlazorCRUD1.I18nText.localizer localizer = new I18nText.localizer();

    protected override async Task OnInitializedAsync()
    {
        localizer = await I18nText.GetTextTableAsync<I18nText.localizer>(this);
    }

    void ConfirmedUpdate()
    {
        if (collectQty > item.CalculateCollectQty())
        {
            return;
        }
        else
        {
            item.SaleReceivedQty += collectQty;
            if (item.SaleReceivedQty == item.SaleTxnQty)
                item.SaleTxnStatus = 0;
            BlazoredModal.Close(ModalResult.Ok(item));
        }

    }

    void Cancel()
    {
        BlazoredModal.Cancel();
    }
}