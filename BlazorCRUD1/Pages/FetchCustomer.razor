@page "/customerlist"
@inject ICustomerManager CustomerManager
@inject IStringLocalizer<FetchCustomer> localizer
@inject IModalService Modal

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

<div>
    <a class="btn btn-primary" @onclick="() => AddCustomerDialog()">@localizer["addCustomer"]</a>
</div>
<br />

@if (customerModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row col-md-3 pull-right">
        <input type="text" id="txtSearch" placeholder=@localizer["searchByPhone"] class="form-control" @bind="SearchTerm" @bind:event="oninput" />
    </div>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                    @localizer["customerPhone"]
                    <span class="fa @(SetSortIcon("Title"))"></span>
                </th>

                <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                    @localizer["customerName"]
                    <span class="fa @(SetSortIcon("Title"))"></span>
                </th>

                <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                    @localizer["customerEmail"]
                    <span class="fa @(SetSortIcon("Title"))"></span>
                </th>

                <th class="sort-th" @onclick="@(() => SortTable("Title"))">
                    @localizer["customerCompany"]
                    <span class="fa @(SetSortIcon("Title"))"></span>
                </th>
                <th>@localizer["action"]</th>
            </tr>
        </thead>
        <tbody>
            @if (customerModel == null || customerModel.Count == 0)
            {
                <tr>
                    <td colspan="6">
                        @localizer["noCustomer"]
                    </td>
                </tr>
            }
            else
            {
                foreach (var customer in customerModel)
                {
                    <tr>
                        <td>@customer.CustomerPhone</td>
                        <td>@customer.CustomerName</td>
                        <td>@customer.CustomerEmail</td>
                        <td>@customer.CustomerCompany</td>
                        <td>
                            <a class="btn btn-primary" href='/editArticle/@customer.ID'>@localizer["edit"]</a>  |
                            <a class="btn btn-danger" @onclick="() => DeleteArticle(customer.ID)">@localizer["delete"]</a>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>@localizer["prev"]</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>@localizer["next"]</button>

    </div>
}


@code {
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }

    List<Customer> customerModel;
    Customer customerEntity = new Customer();


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;
        customerModel = await CustomerManager.ListAll(searchTerm);
        totalRecords = await CustomerManager.Count(searchTerm);
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }

    public async void AddCustomerDialog()
    {
        var formModal = Modal.Show<AddCustomer>(localizer["addCustomer"]);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            //Console.WriteLine("Modal was cancelled");
        }
        else
        {
            Customer temp = (Customer)result.Data;
            temp.UpdatedBy = "Stanley";
            temp.UpdatedDateTime = DateTime.Now;
            CustomerManager.Create(temp).Wait();
            customerModel = await CustomerManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir,"");
            StateHasChanged();
        }
    }


    protected async Task DeleteArticle(int id)
    {
        await CustomerManager.Delete(id);
        customerModel = await CustomerManager.ListAll(searchTerm);
    }

    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<Customer>> SortRecords(string columnName, string dir)
    {
        return await CustomerManager.ListAll(searchTerm);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            customerModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                customerModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                customerModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task refreshRecords(int currentPage)
    {
        customerModel = await CustomerManager.ListAll(searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }

}
